% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subtyper.R
\name{assess_idp_consistency_multi}
\alias{assess_idp_consistency_multi}
\title{Assess neuroscientific consistency between IDPs and performance domains}
\usage{
assess_idp_consistency_multi(
  df,
  Perf.Dom,
  idp_cols,
  backend = c("groq", "openrouter"),
  api_key_env = NULL,
  model = NULL,
  max_retries = 5,
  verbose = TRUE
)
}
\arguments{
\item{df}{A data frame containing at least the performance domain column and one or more IDP columns.}

\item{Perf.Dom}{Character string, name of the column in \code{df} containing the performance domain.}

\item{idp_cols}{Character vector of column names containing IDPs (e.g., \code{c("IDP.1","IDP.2")}).}

\item{backend}{Character string specifying which API backend to use: \code{"groq"} or \code{"openrouter"}.}

\item{api_key_env}{Character string, name of the environment variable storing the API key for the chosen backend.}

\item{model}{Character string, model name for the chosen backend. Defaults to \code{"llama3-70b-8192"} for Groq and \code{"openai/gpt-4o-mini"} for OpenRouter.}

\item{max_retries}{Integer, maximum number of retries in case of rate limiting.}

\item{verbose}{Logical, if \code{TRUE} prints progress and debugging information.}
}
\value{
A data frame with the original data plus:
\itemize{
\item \code{consistency_score} - numeric confidence score (0â€“100).
\item \code{justification} - short justification from the model.
}
}
\description{
This function queries a large language model via either the Groq API or OpenRouter API
to assess the neuroscientific support for the relationship between imaging-derived
phenotypes (IDPs) and a cognitive performance domain. It aggregates multiple IDPs per row
and provides an overall confidence score and justification.
}
\examples{
\dontrun{
df <- data.frame(
  PC_Name = c("PC-6", "PC-10"),
  Perf.Dom = c("working.memory", "recall.total"),
  IDP.1 = c("t1.vol.sup.frontal.ctx", "t1.vol.inf.parietal.ctx"),
  IDP.2 = c("t1.vol.occipital.ctx", "t1.vol.hippocampus"),
  stringsAsFactors = FALSE
)
assess_idp_consistency_multi(
  df,
  Perf.Dom = "Perf.Dom",
  idp_cols = c("IDP.1","IDP.2"),
  backend = "groq",
  api_key_env = "GROQ_API_KEY"
)
}

}
